{
  "version": 3,
  "sources": ["../lib/main.js", "../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isReadOnly = require( '@stdlib/ndarray-base-assert-is-read-only' );\nvar getDType = require( '@stdlib/ndarray-dtype' );\nvar getShape = require( '@stdlib/ndarray-shape' );\nvar getStrides = require( '@stdlib/ndarray-strides' );\nvar getOffset = require( '@stdlib/ndarray-offset' );\nvar getOrder = require( '@stdlib/ndarray-order' );\nvar getData = require( '@stdlib/ndarray-data-buffer' );\nvar ndarray = require( '@stdlib/ndarray-ctor' );\nvar defaults = require( '@stdlib/ndarray-defaults' );\n\n\n// VARIABLES //\n\nvar DEFAULT_ORDER = defaults( 'order' );\n\n\n// MAIN //\n\n/**\n* Converts an ndarray-like object to an ndarray.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {Error} cannot write to a read-only array\n* @returns {ndarray} ndarray\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n*\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );\n*\n* var out = ndarraylike2ndarray( x );\n* // returns <ndarray>\n*/\nfunction ndarraylike2ndarray( x ) {\n\tvar strides;\n\tvar offset;\n\tvar order;\n\tvar shape;\n\tvar data;\n\tvar opts;\n\tvar dt;\n\n\tdt = getDType( x );\n\tdata = getData( x );\n\tshape = getShape( x );\n\tstrides = getStrides( x );\n\toffset = getOffset( x );\n\torder = getOrder( x ) || DEFAULT_ORDER;\n\tif ( arguments.length > 1 ) {\n\t\topts = arguments[ 1 ];\n\t} else {\n\t\topts = {};\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\tif ( opts.readonly === void 0 ) {\n\t\t\t// Preserve read-only behavior...\n\t\t\topts.readonly = true;\n\t\t} else if ( opts.readonly === false ) {\n\t\t\tthrow new Error( 'invalid argument. Cannot write to a read-only array.' );\n\t\t}\n\t}\n\treturn new ndarray( dt, data, shape, strides, offset, order, opts );\n}\n\n\n// EXPORTS //\n\nmodule.exports = ndarraylike2ndarray;\n", "/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Convert an ndarray-like object to an ndarray.\n*\n* @module @stdlib/ndarray-ndarraylike2ndarray\n*\n* @example\n* var array = require( '@stdlib/ndarray-array' );\n* var ndarraylike2ndarray = require( '@stdlib/ndarray-ndarraylike2ndarray' );\n*\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );\n*\n* var out = ndarraylike2ndarray( x );\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n"],
  "mappings": "uGAAA,IAAAA,EAAAC,EAAA,SAAAC,EAAAC,EAAA,cAsBA,IAAIC,EAAa,QAAS,0CAA2C,EACjEC,EAAW,QAAS,uBAAwB,EAC5CC,EAAW,QAAS,uBAAwB,EAC5CC,EAAa,QAAS,yBAA0B,EAChDC,EAAY,QAAS,wBAAyB,EAC9CC,EAAW,QAAS,uBAAwB,EAC5CC,EAAU,QAAS,6BAA8B,EACjDC,EAAU,QAAS,sBAAuB,EAC1CC,EAAW,QAAS,0BAA2B,EAK/CC,EAAgBD,EAAU,OAAQ,EA8BtC,SAASE,EAAqBC,EAAI,CACjC,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAaJ,GAXAA,EAAKjB,EAAUU,CAAE,EACjBK,EAAOV,EAASK,CAAE,EAClBI,EAAQb,EAAUS,CAAE,EACpBC,EAAUT,EAAYQ,CAAE,EACxBE,EAAST,EAAWO,CAAE,EACtBG,EAAQT,EAAUM,CAAE,GAAKF,EACpB,UAAU,OAAS,EACvBQ,EAAO,UAAW,CAAE,EAEpBA,EAAO,CAAC,EAEJjB,EAAYW,CAAE,GAClB,GAAKM,EAAK,WAAa,OAEtBA,EAAK,SAAW,WACLA,EAAK,WAAa,GAC7B,MAAM,IAAI,MAAO,sDAAuD,EAG1E,OAAO,IAAIV,EAASW,EAAIF,EAAMD,EAAOH,EAASC,EAAQC,EAAOG,CAAK,CACnE,CAKAlB,EAAO,QAAUW,IC9DjB,IAAIS,EAAO,IAKX,OAAO,QAAUA",
  "names": ["require_main", "__commonJSMin", "exports", "module", "isReadOnly", "getDType", "getShape", "getStrides", "getOffset", "getOrder", "getData", "ndarray", "defaults", "DEFAULT_ORDER", "ndarraylike2ndarray", "x", "strides", "offset", "order", "shape", "data", "opts", "dt", "main"]
}
