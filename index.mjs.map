{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\nimport format from '@stdlib/error-tools-fmtprodmsg';\n\n// MODULES //\n\nimport isReadOnly from '@stdlib/ndarray-base-assert-is-read-only';\n\nimport getDType from '@stdlib/ndarray-dtype';\nimport getShape from '@stdlib/ndarray-shape';\nimport getStrides from '@stdlib/ndarray-strides';\nimport getOffset from '@stdlib/ndarray-offset';\nimport getOrder from '@stdlib/ndarray-order';\nimport getData from '@stdlib/ndarray-data-buffer';\nimport ndarray from '@stdlib/ndarray-ctor';\nimport defaults from '@stdlib/ndarray-defaults';\n\n// VARIABLES //\n\nvar DEFAULT_ORDER = defaults( 'order' );\n\n// MAIN //\n\n/**\n* Converts an ndarray-like object to an ndarray.\n*\n* @param {ndarrayLike} x - ndarray-like object\n* @param {string} x.dtype - data type\n* @param {Collection} x.data - data buffer\n* @param {NonNegativeIntegerArray} x.shape - dimensions\n* @param {IntegerArray} x.strides - stride lengths\n* @param {NonNegativeInteger} x.offset - index offset\n* @param {string} x.order - specifies whether `x` is row-major (C-style) or column-major (Fortran-style)\n* @param {Options} [options] - function options\n* @param {string} [options.mode=\"throw\"] - specifies how to handle indices which exceed array dimensions\n* @param {StringArray} [options.submode=[\"throw\"]] - specifies how to handle subscripts which exceed array dimensions on a per dimension basis\n* @param {boolean} [options.readonly=false] - boolean indicating whether an array should be read-only\n* @throws {Error} cannot write to a read-only array\n* @returns {ndarray} ndarray\n*\n* @example\n* import array from '@stdlib/ndarray-array';\n*\n* var x = array( [ [ 1, 2, 3 ], [ 4, 5, 6 ] ] );\n*\n* var out = ndarraylike2ndarray( x );\n* // returns <ndarray>\n*/\nfunction ndarraylike2ndarray( x ) {\n\tvar strides;\n\tvar offset;\n\tvar order;\n\tvar shape;\n\tvar data;\n\tvar opts;\n\tvar dt;\n\n\tdt = getDType( x );\n\tdata = getData( x );\n\tshape = getShape( x );\n\tstrides = getStrides( x );\n\toffset = getOffset( x );\n\torder = getOrder( x ) || DEFAULT_ORDER;\n\tif ( arguments.length > 1 ) {\n\t\topts = arguments[ 1 ];\n\t} else {\n\t\topts = {};\n\t}\n\tif ( isReadOnly( x ) ) {\n\t\tif ( opts.readonly === void 0 ) {\n\t\t\t// Preserve read-only behavior...\n\t\t\topts.readonly = true;\n\t\t} else if ( opts.readonly === false ) {\n\t\t\tthrow new Error( format('nullEs') );\n\t\t}\n\t}\n\treturn new ndarray( dt, data, shape, strides, offset, order, opts );\n}\n\n// EXPORTS //\n\nexport default ndarraylike2ndarray;\n"],"names":["DEFAULT_ORDER","defaults","ndarraylike2ndarray","x","strides","offset","order","shape","data","opts","dt","getDType","getData","getShape","getStrides","getOffset","getOrder","arguments","length","isReadOnly","readonly","Error","format","ndarray"],"mappings":";;u5BAqCA,IAAIA,EAAgBC,EAAU,SA6B9B,SAASC,EAAqBC,GAC7B,IAAIC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,EAaJ,GAXAA,EAAKC,EAAUR,GACfK,EAAOI,EAAST,GAChBI,EAAQM,EAAUV,GAClBC,EAAUU,EAAYX,GACtBE,EAASU,EAAWZ,GACpBG,EAAQU,EAAUb,IAAOH,EAExBS,EADIQ,UAAUC,OAAS,EAChBD,UAAW,GAEX,CAAA,EAEHE,EAAYhB,GAChB,QAAuB,IAAlBM,EAAKW,SAETX,EAAKW,UAAW,OACV,IAAuB,IAAlBX,EAAKW,SAChB,MAAM,IAAIC,MAAOC,EAAO,WAG1B,OAAO,IAAIC,EAASb,EAAIF,EAAMD,EAAOH,EAASC,EAAQC,EAAOG,EAC9D"}